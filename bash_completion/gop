# gop completion

function_exists()
{
	declare -F $1 > /dev/null
	return $?
}

function_exists __ltrim_colon_completions ||
__ltrim_colon_completions()
{
	if [[ "$1" == *:* && "$COMP_WORDBREAKS" == *:* ]]; then
		# Remove colon-word prefix from COMPREPLY items
		local colon_word=${1%${1##*:}}
		local i=${#COMPREPLY[*]}
		while [[ $((--i)) -ge 0 ]]; do
			COMPREPLY[$i]=${COMPREPLY[$i]#"$colon_word"}
		done
	fi
}

#have gop &&
_gop()
{
	local cur prev cmd
	
	COMPREPLY=()
	if function_exists _get_comp_words_by_ref; then
		_get_comp_words_by_ref -n : cur prev
	else
		cur=$(_get_cword :)
		prev=${COMP_WORDS[COMP_CWORD-1]}
	fi
	
	cmd=${COMP_WORDS[0]}
	act=${COMP_WORDS[1]}
	
	### --------------------------------------------------
	
	#echo ""
	#echo "cmd: ${cmd}"
	#echo "act: ${act}"
	#echo "cur: ${cur}"
	
	### --------------------------------------------------
	
	if [ ${prev} == gop ]; then
	  COMPREPLY=( $( compgen -W '
	    status \
      git-rebase           git-rb   rb  \
      git-update           git-up   up  \
      git-sequence-rebase  git-srb  srb \
      git-archive          git-ar       \
      git-prune            git-pru  pru \
      ' -- "$cur" ) )
	  return 0
	fi
	
	case ${act} in
	  
	  git-update | git-up | up)
	    __gitcomp_nl "$(__git_heads)"
	  ;;
	  
	  git-rebase | git-rb | rb)
	    case ${cur} in
	      
	      -*)
	        COMPREPLY=( $( compgen -W '-all -noedit -i -k -prev --onto' -- "$cur" ) )
	      ;;
	      
	      *)
  	      __gitcomp_nl "$(__git_heads)"
	      ;;
	      
	    esac
	  ;;
	  
	  *)
	    #return 0
	    __gitcomp_nl "$(__git_heads)"
	  ;;
	  
	esac
	
} &&
complete -F _gop gop
